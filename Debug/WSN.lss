
WSN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000197c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000197c  00001a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800094  00800094  00001a44  2**0
                  ALLOC
  3 .stab         00001b9c  00000000  00000000  00001a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f28  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000047b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006401  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000072ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000809c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008489  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008c57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8_t count =0 ;
/* ------------------------------------------------------------------------- */
void Auto_ACK() ;

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	DIO_voidInit();
     b5a:	0e 94 31 07 	call	0xe62	; 0xe62 <DIO_voidInit>
    /* init hardware pins */
    nrf24_init();
     b5e:	0e 94 77 09 	call	0x12ee	; 0x12ee <nrf24_init>
    
    /* Channel #2 , payload length: 4 */
    nrf24_config(2,4);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	64 e0       	ldi	r22, 0x04	; 4
     b66:	0e 94 88 09 	call	0x1310	; 0x1310 <nrf24_config>

    /* Set the device addresses */

    nrf24_rx_address(rx_address);
     b6a:	87 e7       	ldi	r24, 0x77	; 119
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 cf 09 	call	0x139e	; 0x139e <nrf24_rx_address>

    while(1)
    {                
        /* Fill the data buffer */
        data_array[0] = q;
     b72:	80 91 68 00 	lds	r24, 0x0068
     b76:	80 93 a0 00 	sts	0x00A0, r24
        data_array[1] = q;
     b7a:	80 91 68 00 	lds	r24, 0x0068
     b7e:	80 93 a1 00 	sts	0x00A1, r24
        data_array[2] = q;
     b82:	80 91 68 00 	lds	r24, 0x0068
     b86:	80 93 a2 00 	sts	0x00A2, r24
        data_array[3] = q;
     b8a:	80 91 68 00 	lds	r24, 0x0068
     b8e:	80 93 a3 00 	sts	0x00A3, r24
//
//        /* Automatically goes to TX mode */
        nrf24_powerUpRx();
     b92:	0e 94 17 0b 	call	0x162e	; 0x162e <nrf24_powerUpRx>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a8 e4       	ldi	r26, 0x48	; 72
     b9c:	b3 e4       	ldi	r27, 0x43	; 67
     b9e:	8b 87       	std	Y+11, r24	; 0x0b
     ba0:	9c 87       	std	Y+12, r25	; 0x0c
     ba2:	ad 87       	std	Y+13, r26	; 0x0d
     ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a e7       	ldi	r20, 0x7A	; 122
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	8f 83       	std	Y+7, r24	; 0x07
     bc0:	98 87       	std	Y+8, r25	; 0x08
     bc2:	a9 87       	std	Y+9, r26	; 0x09
     bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc6:	6f 81       	ldd	r22, Y+7	; 0x07
     bc8:	78 85       	ldd	r23, Y+8	; 0x08
     bca:	89 85       	ldd	r24, Y+9	; 0x09
     bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <main+0xa2>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <main+0x120>
	else if (__tmp > 65535)
     be8:	6f 81       	ldd	r22, Y+7	; 0x07
     bea:	78 85       	ldd	r23, Y+8	; 0x08
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6b 85       	ldd	r22, Y+11	; 0x0b
     c02:	7c 85       	ldd	r23, Y+12	; 0x0c
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
     c06:	9e 85       	ldd	r25, Y+14	; 0x0e
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <main+0x102>
     c2a:	84 e6       	ldi	r24, 0x64	; 100
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <main+0xf0>
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <main+0xe4>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	6f 81       	ldd	r22, Y+7	; 0x07
     c54:	78 85       	ldd	r23, Y+8	; 0x08
     c56:	89 85       	ldd	r24, Y+9	; 0x09
     c58:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <main+0x12c>
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
        	_delay_ms(200);
  if(nrf24_dataReady())
     c7a:	0e 94 0d 0a 	call	0x141a	; 0x141a <nrf24_dataReady>
     c7e:	88 23       	and	r24, r24
     c80:	09 f4       	brne	.+2      	; 0xc84 <main+0x13e>
     c82:	77 cf       	rjmp	.-274    	; 0xb72 <main+0x2c>
  {
	   nrf24_getData(rx_arr);
     c84:	84 e9       	ldi	r24, 0x94	; 148
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <nrf24_getData>
	   if (count==0)
     c8c:	80 91 9a 00 	lds	r24, 0x009A
     c90:	88 23       	and	r24, r24
     c92:	81 f4       	brne	.+32     	; 0xcb4 <main+0x16e>
	   {
		nrf24_tx_address(tx_addressNODE);
     c94:	8d e6       	ldi	r24, 0x6D	; 109
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <nrf24_tx_address>
		nrf24_send(rx_arr);
     c9c:	84 e9       	ldi	r24, 0x94	; 148
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 92 0a 	call	0x1524	; 0x1524 <nrf24_send>
        while(nrf24_isSending());
     ca4:	0e 94 c5 0a 	call	0x158a	; 0x158a <nrf24_isSending>
     ca8:	88 23       	and	r24, r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x15e>
        count=1 ;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 9a 00 	sts	0x009A, r24
     cb2:	5f cf       	rjmp	.-322    	; 0xb72 <main+0x2c>
	   }
	   else if (count==1)
     cb4:	80 91 9a 00 	lds	r24, 0x009A
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x178>
     cbc:	5a cf       	rjmp	.-332    	; 0xb72 <main+0x2c>
	   {
		   nrf24_tx_address(tx_addressCOR);
     cbe:	82 e7       	ldi	r24, 0x72	; 114
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <nrf24_tx_address>
		   nrf24_send(rx_arr);
     cc6:	84 e9       	ldi	r24, 0x94	; 148
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 92 0a 	call	0x1524	; 0x1524 <nrf24_send>
		   while(nrf24_isSending());
     cce:	0e 94 c5 0a 	call	0x158a	; 0x158a <nrf24_isSending>
     cd2:	88 23       	and	r24, r24
     cd4:	e1 f7       	brne	.-8      	; 0xcce <main+0x188>
		   count=0 ;
     cd6:	10 92 9a 00 	sts	0x009A, r1
     cda:	4b cf       	rjmp	.-362    	; 0xb72 <main+0x2c>

00000cdc <Auto_ACK>:

    }
}
/* ------------------------------------------------------------------------- */
void Auto_ACK()
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	2e 97       	sbiw	r28, 0x0e	; 14
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	a3 c0       	rjmp	.+326    	; 0xe38 <Auto_ACK+0x15c>


while(counter<mx_retransmetion)
{
	nrf24_powerUpRx();
     cf2:	0e 94 17 0b 	call	0x162e	; 0x162e <nrf24_powerUpRx>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	a8 e4       	ldi	r26, 0x48	; 72
     cfc:	b3 e4       	ldi	r27, 0x43	; 67
     cfe:	8b 87       	std	Y+11, r24	; 0x0b
     d00:	9c 87       	std	Y+12, r25	; 0x0c
     d02:	ad 87       	std	Y+13, r26	; 0x0d
     d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d06:	6b 85       	ldd	r22, Y+11	; 0x0b
     d08:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a e7       	ldi	r20, 0x7A	; 122
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	8f 83       	std	Y+7, r24	; 0x07
     d20:	98 87       	std	Y+8, r25	; 0x08
     d22:	a9 87       	std	Y+9, r26	; 0x09
     d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d26:	6f 81       	ldd	r22, Y+7	; 0x07
     d28:	78 85       	ldd	r23, Y+8	; 0x08
     d2a:	89 85       	ldd	r24, Y+9	; 0x09
     d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e8       	ldi	r20, 0x80	; 128
     d34:	5f e3       	ldi	r21, 0x3F	; 63
     d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	2c f4       	brge	.+10     	; 0xd48 <Auto_ACK+0x6c>
		__ticks = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
     d46:	3f c0       	rjmp	.+126    	; 0xdc6 <Auto_ACK+0xea>
	else if (__tmp > 65535)
     d48:	6f 81       	ldd	r22, Y+7	; 0x07
     d4a:	78 85       	ldd	r23, Y+8	; 0x08
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	3f ef       	ldi	r19, 0xFF	; 255
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	57 e4       	ldi	r21, 0x47	; 71
     d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	4c f5       	brge	.+82     	; 0xdb2 <Auto_ACK+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d60:	6b 85       	ldd	r22, Y+11	; 0x0b
     d62:	7c 85       	ldd	r23, Y+12	; 0x0c
     d64:	8d 85       	ldd	r24, Y+13	; 0x0d
     d66:	9e 85       	ldd	r25, Y+14	; 0x0e
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e2       	ldi	r20, 0x20	; 32
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05
     d88:	0f c0       	rjmp	.+30     	; 0xda8 <Auto_ACK+0xcc>
     d8a:	84 e6       	ldi	r24, 0x64	; 100
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <Auto_ACK+0xba>
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	69 f7       	brne	.-38     	; 0xd8a <Auto_ACK+0xae>
     db0:	14 c0       	rjmp	.+40     	; 0xdda <Auto_ACK+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	78 85       	ldd	r23, Y+8	; 0x08
     db6:	89 85       	ldd	r24, Y+9	; 0x09
     db8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9e 83       	std	Y+6, r25	; 0x06
     dc4:	8d 83       	std	Y+5, r24	; 0x05
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <Auto_ACK+0xf6>
     dd6:	9a 83       	std	Y+2, r25	; 0x02
     dd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

		if(nrf24_dataReady())
     dda:	0e 94 0d 0a 	call	0x141a	; 0x141a <nrf24_dataReady>
     dde:	88 23       	and	r24, r24
     de0:	f1 f0       	breq	.+60     	; 0xe1e <Auto_ACK+0x142>
		{
			nrf24_getData(rx_arr);
     de2:	84 e9       	ldi	r24, 0x94	; 148
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <nrf24_getData>

			if(rx_arr[0]==1)
     dea:	80 91 94 00 	lds	r24, 0x0094
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	41 f4       	brne	.+16     	; 0xe02 <Auto_ACK+0x126>
			{
				q++;
     df2:	80 91 68 00 	lds	r24, 0x0068
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	80 93 68 00 	sts	0x0068, r24
				counter=0;
     dfc:	10 92 98 00 	sts	0x0098, r1
     e00:	20 c0       	rjmp	.+64     	; 0xe42 <Auto_ACK+0x166>
				break ;
			}
			else
			{
				counter++ ;
     e02:	80 91 98 00 	lds	r24, 0x0098
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	80 93 98 00 	sts	0x0098, r24
				nrf24_send(data_array);
     e0c:	80 ea       	ldi	r24, 0xA0	; 160
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 92 0a 	call	0x1524	; 0x1524 <nrf24_send>
				 while(nrf24_isSending());
     e14:	0e 94 c5 0a 	call	0x158a	; 0x158a <nrf24_isSending>
     e18:	88 23       	and	r24, r24
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <Auto_ACK+0x138>
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <Auto_ACK+0x15c>
			}

		}
		else
		{
			counter++ ;
     e1e:	80 91 98 00 	lds	r24, 0x0098
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 98 00 	sts	0x0098, r24
			nrf24_send(data_array);
     e28:	80 ea       	ldi	r24, 0xA0	; 160
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 92 0a 	call	0x1524	; 0x1524 <nrf24_send>
			   while(nrf24_isSending());
     e30:	0e 94 c5 0a 	call	0x158a	; 0x158a <nrf24_isSending>
     e34:	88 23       	and	r24, r24
     e36:	e1 f7       	brne	.-8      	; 0xe30 <Auto_ACK+0x154>
/* ------------------------------------------------------------------------- */
void Auto_ACK()
{


while(counter<mx_retransmetion)
     e38:	80 91 98 00 	lds	r24, 0x0098
     e3c:	8f 30       	cpi	r24, 0x0F	; 15
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <Auto_ACK+0x166>
     e40:	58 cf       	rjmp	.-336    	; 0xcf2 <Auto_ACK+0x16>
		}


}

if(counter==15)
     e42:	80 91 98 00 	lds	r24, 0x0098
     e46:	8f 30       	cpi	r24, 0x0F	; 15
     e48:	19 f4       	brne	.+6      	; 0xe50 <Auto_ACK+0x174>
       	flag=1 ;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 99 00 	sts	0x0099, r24
}
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <DIO_voidInit>:
static  u8 * const DIO_u8Ddrs[]={DIO_u8DDRA ,DIO_u8DDRB, DIO_u8DDRC , DIO_u8DDRD} ;
static  u8 *const DIO_u8Pins[]={DIO_u8PINA ,DIO_u8PINB, DIO_u8PINC , DIO_u8PIND} ;


extern void DIO_voidInit(void)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62

/*Comment!:initializing Ports Directions */
*DIO_u8Ddrs[DIO_u8PORT0]=DIO_u8PORTA_DIR;
     e6a:	e0 91 84 00 	lds	r30, 0x0084
     e6e:	f0 91 85 00 	lds	r31, 0x0085
     e72:	8f ee       	ldi	r24, 0xEF	; 239
     e74:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT1]=DIO_u8PORTB_DIR;
     e76:	e0 91 86 00 	lds	r30, 0x0086
     e7a:	f0 91 87 00 	lds	r31, 0x0087
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT2]=DIO_u8PORTC_DIR;
     e82:	e0 91 88 00 	lds	r30, 0x0088
     e86:	f0 91 89 00 	lds	r31, 0x0089
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	80 83       	st	Z, r24
*DIO_u8Ddrs[DIO_u8PORT3]=DIO_u8PORTD_DIR;
     e8e:	e0 91 8a 00 	lds	r30, 0x008A
     e92:	f0 91 8b 00 	lds	r31, 0x008B
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	80 83       	st	Z, r24

/*Comment!:initializing Ports Value  */
*DIO_u8Ports[DIO_u8PORT0] =(DIO_u8PORTA_DIR & DIO_u8PORTA_VAL) | ((~DIO_u8PORTA_DIR)&*DIO_u8Ports[DIO_u8PORT0] );
     e9a:	a0 91 7c 00 	lds	r26, 0x007C
     e9e:	b0 91 7d 00 	lds	r27, 0x007D
     ea2:	e0 91 7c 00 	lds	r30, 0x007C
     ea6:	f0 91 7d 00 	lds	r31, 0x007D
     eaa:	80 81       	ld	r24, Z
     eac:	80 71       	andi	r24, 0x10	; 16
     eae:	8c 93       	st	X, r24
*DIO_u8Ports[DIO_u8PORT1] =(DIO_u8PORTB_DIR & DIO_u8PORTB_VAL)| ((~DIO_u8PORTB_DIR)&*DIO_u8Ports[DIO_u8PORT1] );
     eb0:	e0 91 7e 00 	lds	r30, 0x007E
     eb4:	f0 91 7f 00 	lds	r31, 0x007F
     eb8:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT2] =(DIO_u8PORTC_DIR & DIO_u8PORTC_VAL)| ((~DIO_u8PORTC_DIR)&*DIO_u8Ports[DIO_u8PORT2] );
     eba:	e0 91 80 00 	lds	r30, 0x0080
     ebe:	f0 91 81 00 	lds	r31, 0x0081
     ec2:	10 82       	st	Z, r1
*DIO_u8Ports[DIO_u8PORT3] =(DIO_u8PORTD_DIR & DIO_u8PORTD_VAL)| ((~DIO_u8PORTD_DIR)&*DIO_u8Ports[DIO_u8PORT3] );
     ec4:	e0 91 82 00 	lds	r30, 0x0082
     ec8:	f0 91 83 00 	lds	r31, 0x0083
     ecc:	10 82       	st	Z, r1

}
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <DIO_u8ReadPinVal>:


extern u8 DIO_u8ReadPinVal(u8 Copy_u8PinIdx,u8* Copy_u8PtrToval)
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <DIO_u8ReadPinVal+0x6>
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8ReadPinVal+0x8>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8ReadPinVal+0xa>
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	8c 83       	std	Y+4, r24	; 0x04
     ee4:	7e 83       	std	Y+6, r23	; 0x06
     ee6:	6d 83       	std	Y+5, r22	; 0x05

	 u8 Local_u8CheckPinState=ok ;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_u8PinIdx<DIO_u8PINMAXIDX)
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	8f 31       	cpi	r24, 0x1F	; 31
     ef0:	80 f5       	brcc	.+96     	; 0xf52 <DIO_u8ReadPinVal+0x7e>
	    {

		u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	86 95       	lsr	r24
     ef6:	86 95       	lsr	r24
     ef8:	86 95       	lsr	r24
     efa:	8a 83       	std	Y+2, r24	; 0x02
		u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	87 70       	andi	r24, 0x07	; 7
     f00:	89 83       	std	Y+1, r24	; 0x01

		* Copy_u8PtrToval=get_bit(*DIO_u8Pins[local_u8CheckPinPlace],local_u8MapPin);
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	fc 01       	movw	r30, r24
     f0e:	e4 57       	subi	r30, 0x74	; 116
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	01 90       	ld	r0, Z+
     f14:	f0 81       	ld	r31, Z
     f16:	e0 2d       	mov	r30, r0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_u8ReadPinVal+0x5a>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	2a 95       	dec	r18
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_u8ReadPinVal+0x56>
     f32:	9a 01       	movw	r18, r20
     f34:	28 23       	and	r18, r24
     f36:	39 23       	and	r19, r25
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8ReadPinVal+0x72>
     f42:	55 95       	asr	r21
     f44:	47 95       	ror	r20
     f46:	8a 95       	dec	r24
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8ReadPinVal+0x6e>
     f4a:	ca 01       	movw	r24, r20
     f4c:	ed 81       	ldd	r30, Y+5	; 0x05
     f4e:	fe 81       	ldd	r31, Y+6	; 0x06
     f50:	80 83       	st	Z, r24
    }
    else
    {

    }
return    Local_u8CheckPinState=ok ;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f58:	26 96       	adiw	r28, 0x06	; 6
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DIO_u8WritePinVal>:

extern u8 DIO_u8WritePinVal(u8 Copy_u8PinIdx,u8 Copy_u8Pinval)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <DIO_u8WritePinVal+0x6>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <DIO_u8WritePinVal+0x8>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <DIO_u8WritePinVal+0xa>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	8d 83       	std	Y+5, r24	; 0x05
     f7a:	6e 83       	std	Y+6, r22	; 0x06
	 u8 Local_u8CheckPinState=ok ;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	8c 83       	std	Y+4, r24	; 0x04

	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	80 32       	cpi	r24, 0x20	; 32
     f84:	10 f0       	brcs	.+4      	; 0xf8a <DIO_u8WritePinVal+0x20>
	    {
	    	 Local_u8CheckPinState=error ;
     f86:	1c 82       	std	Y+4, r1	; 0x04
     f88:	64 c0       	rjmp	.+200    	; 0x1052 <DIO_u8WritePinVal+0xe8>
	    }
	    else
	    {
	    	 u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	86 95       	lsr	r24
     f8e:	86 95       	lsr	r24
     f90:	86 95       	lsr	r24
     f92:	8b 83       	std	Y+3, r24	; 0x03
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	87 70       	andi	r24, 0x07	; 7
     f98:	8a 83       	std	Y+2, r24	; 0x02
	    	     u8 local_u8PinDir;
	    	     local_u8PinDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	fc 01       	movw	r30, r24
     fa6:	ec 57       	subi	r30, 0x7C	; 124
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	01 90       	ld	r0, Z+
     fac:	f0 81       	ld	r31, Z
     fae:	e0 2d       	mov	r30, r0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_u8WritePinVal+0x5c>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	2a 95       	dec	r18
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_u8WritePinVal+0x58>
     fca:	9a 01       	movw	r18, r20
     fcc:	28 23       	and	r18, r24
     fce:	39 23       	and	r19, r25
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_u8WritePinVal+0x74>
     fda:	55 95       	asr	r21
     fdc:	47 95       	ror	r20
     fde:	8a 95       	dec	r24
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_u8WritePinVal+0x70>
     fe2:	ca 01       	movw	r24, r20
     fe4:	89 83       	std	Y+1, r24	; 0x01
	    	if(local_u8PinDir==1)
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	99 f5       	brne	.+102    	; 0x1052 <DIO_u8WritePinVal+0xe8>
	    	{
	    	assign_bit(*DIO_u8Ports[local_u8CheckPinPlace],local_u8MapPin,Copy_u8Pinval);
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	fc 01       	movw	r30, r24
     ff8:	e4 58       	subi	r30, 0x84	; 132
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	a0 81       	ld	r26, Z
     ffe:	b1 81       	ldd	r27, Z+1	; 0x01
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_u8WritePinVal+0xa6>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_u8WritePinVal+0xa2>
    1014:	28 2f       	mov	r18, r24
    1016:	20 95       	com	r18
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	fc 01       	movw	r30, r24
    1024:	e4 58       	subi	r30, 0x84	; 132
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	01 90       	ld	r0, Z+
    102a:	f0 81       	ld	r31, Z
    102c:	e0 2d       	mov	r30, r0
    102e:	80 81       	ld	r24, Z
    1030:	42 2f       	mov	r20, r18
    1032:	48 23       	and	r20, r24
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	b9 01       	movw	r22, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_u8WritePinVal+0xde>
    1044:	66 0f       	add	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	8a 95       	dec	r24
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_u8WritePinVal+0xda>
    104c:	cb 01       	movw	r24, r22
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
	    	{

	    	}
	    }

     return  Local_u8CheckPinState ;
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1054:	26 96       	adiw	r28, 0x06	; 6
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <DIO_u8ReadPortVal>:


extern u8 DIO_u8ReadPortVal(u8 Copy_u8PortIdx,u8* Copy_u8PtrToval)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <DIO_u8ReadPortVal+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <DIO_u8ReadPortVal+0x8>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	7c 83       	std	Y+4, r23	; 0x04
    1076:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	84 30       	cpi	r24, 0x04	; 4
    1080:	80 f4       	brcc	.+32     	; 0x10a2 <DIO_u8ReadPortVal+0x3c>
	{

	* Copy_u8PtrToval=*DIO_u8Pins[Copy_u8PortIdx] ;
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	fc 01       	movw	r30, r24
    108e:	e4 57       	subi	r30, 0x74	; 116
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	01 90       	ld	r0, Z+
    1094:	f0 81       	ld	r31, Z
    1096:	e0 2d       	mov	r30, r0
    1098:	80 81       	ld	r24, Z
    109a:	eb 81       	ldd	r30, Y+3	; 0x03
    109c:	fc 81       	ldd	r31, Y+4	; 0x04
    109e:	80 83       	st	Z, r24
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <DIO_u8ReadPortVal+0x3e>
	}
	else
	{
		Local_u8CheckPortR=error ;
    10a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8CheckPortR ;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_u8WritePortVal>:

extern u8 DIO_u8WritePortVal(u8 Copy_u8PortIdx,u8 Copy_u8Portval)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <DIO_u8WritePortVal+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <DIO_u8WritePortVal+0x8>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	6c 83       	std	Y+4, r22	; 0x04
     	u8 Local_u8CheckPortR=ok ;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	8a 83       	std	Y+2, r24	; 0x02
        u8 local_u8PortDir;
		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	f0 f4       	brcc	.+60     	; 0x110a <DIO_u8WritePortVal+0x56>
		{
				local_u8PortDir=*DIO_u8Ddrs[Copy_u8PortIdx] ;
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	fc 01       	movw	r30, r24
    10da:	ec 57       	subi	r30, 0x7C	; 124
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	01 90       	ld	r0, Z+
    10e0:	f0 81       	ld	r31, Z
    10e2:	e0 2d       	mov	r30, r0
    10e4:	80 81       	ld	r24, Z
    10e6:	89 83       	std	Y+1, r24	; 0x01
			  if(local_u8PortDir==0xff)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	8f 3f       	cpi	r24, 0xFF	; 255
    10ec:	79 f4       	brne	.+30     	; 0x110c <DIO_u8WritePortVal+0x58>
			  {
		        *DIO_u8Ports[Copy_u8PortIdx]= Copy_u8Portval;
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	fc 01       	movw	r30, r24
    10fa:	e4 58       	subi	r30, 0x84	; 132
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	01 90       	ld	r0, Z+
    1100:	f0 81       	ld	r31, Z
    1102:	e0 2d       	mov	r30, r0
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	80 83       	st	Z, r24
    1108:	01 c0       	rjmp	.+2      	; 0x110c <DIO_u8WritePortVal+0x58>

			  }
		}
		else
		{
			Local_u8CheckPortR=error ;
    110a:	1a 82       	std	Y+2, r1	; 0x02
		}

		return Local_u8CheckPortR ;
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DIO_u8WritePinDir>:

extern u8 DIO_u8WritePinDir(u8 Copy_u8PinIdx,u8 Copy_u8PinDir)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_u8WritePinDir+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_u8WritePinDir+0x8>
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	8c 83       	std	Y+4, r24	; 0x04
    112c:	6d 83       	std	Y+5, r22	; 0x05
	     u8 Local_u8CheckPinState=ok ;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	8b 83       	std	Y+3, r24	; 0x03

		    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	80 32       	cpi	r24, 0x20	; 32
    1136:	10 f0       	brcs	.+4      	; 0x113c <DIO_u8WritePinDir+0x20>
		    {
		    	 Local_u8CheckPinState=error ;
    1138:	1b 82       	std	Y+3, r1	; 0x03
    113a:	3b c0       	rjmp	.+118    	; 0x11b2 <DIO_u8WritePinDir+0x96>
		    }
		    else
		    {
		    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS ;
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	86 95       	lsr	r24
    1140:	86 95       	lsr	r24
    1142:	86 95       	lsr	r24
    1144:	8a 83       	std	Y+2, r24	; 0x02
		    	u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	87 70       	andi	r24, 0x07	; 7
    114a:	89 83       	std	Y+1, r24	; 0x01
		    	assign_bit(* DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin,Copy_u8PinDir);
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	fc 01       	movw	r30, r24
    1158:	ec 57       	subi	r30, 0x7C	; 124
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	a0 81       	ld	r26, Z
    115e:	b1 81       	ldd	r27, Z+1	; 0x01
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8WritePinDir+0x54>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	2a 95       	dec	r18
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8WritePinDir+0x50>
    1174:	28 2f       	mov	r18, r24
    1176:	20 95       	com	r18
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	fc 01       	movw	r30, r24
    1184:	ec 57       	subi	r30, 0x7C	; 124
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	01 90       	ld	r0, Z+
    118a:	f0 81       	ld	r31, Z
    118c:	e0 2d       	mov	r30, r0
    118e:	80 81       	ld	r24, Z
    1190:	42 2f       	mov	r20, r18
    1192:	48 23       	and	r20, r24
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b9 01       	movw	r22, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_u8WritePinDir+0x8c>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_u8WritePinDir+0x88>
    11ac:	cb 01       	movw	r24, r22
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
		    }

	     return  Local_u8CheckPinState ;
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <DIO_u8WritePortDir>:

extern u8 DIO_u8WritePortDir(u8 Copy_u8PortIdx,u8 Copy_u8PortDir)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <DIO_u8WritePortDir+0x6>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8CheckPortR=ok ;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01

			if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	84 30       	cpi	r24, 0x04	; 4
    11dc:	70 f4       	brcc	.+28     	; 0x11fa <DIO_u8WritePortDir+0x36>
			{

			*DIO_u8Ddrs[Copy_u8PortIdx]= Copy_u8PortDir;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	fc 01       	movw	r30, r24
    11ea:	ec 57       	subi	r30, 0x7C	; 124
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	01 90       	ld	r0, Z+
    11f0:	f0 81       	ld	r31, Z
    11f2:	e0 2d       	mov	r30, r0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	80 83       	st	Z, r24
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <DIO_u8WritePortDir+0x38>
			}
			else
			{
				Local_u8CheckPortR=error ;
    11fa:	19 82       	std	Y+1, r1	; 0x01
			}

			return Local_u8CheckPortR ;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <DIO_u8ReadPinDir>:

extern u8 DIO_u8ReadPinDir(u8 Copy_u8PinIdx,u8 * Copy_u8PtrToDir)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <DIO_u8ReadPinDir+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <DIO_u8ReadPinDir+0x8>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <DIO_u8ReadPinDir+0xa>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	8c 83       	std	Y+4, r24	; 0x04
    121a:	7e 83       	std	Y+6, r23	; 0x06
    121c:	6d 83       	std	Y+5, r22	; 0x05
	 u8 Local_u8CheckPinState=ok ;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	8b 83       	std	Y+3, r24	; 0x03


	    if(Copy_u8PinIdx>DIO_u8PINMAXIDX)
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	80 32       	cpi	r24, 0x20	; 32
    1226:	10 f0       	brcs	.+4      	; 0x122c <DIO_u8ReadPinDir+0x22>
	    {
	    	 Local_u8CheckPinState=error ;
    1228:	1b 82       	std	Y+3, r1	; 0x03
    122a:	30 c0       	rjmp	.+96     	; 0x128c <DIO_u8ReadPinDir+0x82>
	    }
	    else
	    {
	    	u8 local_u8CheckPinPlace=Copy_u8PinIdx/PINNUMS;
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	86 95       	lsr	r24
    1234:	8a 83       	std	Y+2, r24	; 0x02
	    		 u8 local_u8MapPin=Copy_u8PinIdx%PINNUMS ;
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	87 70       	andi	r24, 0x07	; 7
    123a:	89 83       	std	Y+1, r24	; 0x01
	    	* Copy_u8PtrToDir=get_bit(*DIO_u8Ddrs[local_u8CheckPinPlace],local_u8MapPin);
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	fc 01       	movw	r30, r24
    1248:	ec 57       	subi	r30, 0x7C	; 124
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	01 90       	ld	r0, Z+
    124e:	f0 81       	ld	r31, Z
    1250:	e0 2d       	mov	r30, r0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_u8ReadPinDir+0x5e>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	2a 95       	dec	r18
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_u8ReadPinDir+0x5a>
    126c:	9a 01       	movw	r18, r20
    126e:	28 23       	and	r18, r24
    1270:	39 23       	and	r19, r25
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8ReadPinDir+0x76>
    127c:	55 95       	asr	r21
    127e:	47 95       	ror	r20
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8ReadPinDir+0x72>
    1284:	ca 01       	movw	r24, r20
    1286:	ed 81       	ldd	r30, Y+5	; 0x05
    1288:	fe 81       	ldd	r31, Y+6	; 0x06
    128a:	80 83       	st	Z, r24
	    }
	return  Local_u8CheckPinState ;
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    128e:	26 96       	adiw	r28, 0x06	; 6
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_u8ReadPortDir>:

extern u8 DIO_u8ReadPortDir(u8 Copy_u8PortIdx,u8 *Copy_u8PtrToDir)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_u8ReadPortDir+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_u8ReadPortDir+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	7c 83       	std	Y+4, r23	; 0x04
    12b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8CheckPortR=ok ;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PortIdx<=DIO_u8PORTMAXIDX)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	80 f4       	brcc	.+32     	; 0x12dc <DIO_u8ReadPortDir+0x3c>
		{

		* Copy_u8PtrToDir=*DIO_u8Pins[Copy_u8PortIdx] ;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	fc 01       	movw	r30, r24
    12c8:	e4 57       	subi	r30, 0x74	; 116
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	01 90       	ld	r0, Z+
    12ce:	f0 81       	ld	r31, Z
    12d0:	e0 2d       	mov	r30, r0
    12d2:	80 81       	ld	r24, Z
    12d4:	eb 81       	ldd	r30, Y+3	; 0x03
    12d6:	fc 81       	ldd	r31, Y+4	; 0x04
    12d8:	80 83       	st	Z, r24
    12da:	01 c0       	rjmp	.+2      	; 0x12de <DIO_u8ReadPortDir+0x3e>
		}
		else
		{
			Local_u8CheckPortR=error ;
    12dc:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8CheckPortR ;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <nrf24_init>:
#include "DIO-interface.h"
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init() 
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    nrf24_setupPins();
    12f6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <nrf24_setupPins>
    DIO_u8WritePinVal(CE , DIO_u8LOW);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <nrf24_config>:

/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <nrf24_config+0x6>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	6a 83       	std	Y+2, r22	; 0x02
    /* Use static payload length ... */
    payload_len = pay_length;
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	80 93 a4 00 	sts	0x00A4, r24

    // Set RF channel
    nrf24_configRegister(RF_CH,channel);
    1324:	85 e0       	ldi	r24, 0x05	; 5
    1326:	69 81       	ldd	r22, Y+1	; 0x01
    1328:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // Set length of incoming payload 
    nrf24_configRegister(RX_PW_P0, 0); // Auto-ACK pipe ...
    132c:	81 e1       	ldi	r24, 0x11	; 17
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
    1334:	90 91 a4 00 	lds	r25, 0x00A4
    1338:	82 e1       	ldi	r24, 0x12	; 18
    133a:	69 2f       	mov	r22, r25
    133c:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P2, 0); // Pipe not used
    1340:	83 e1       	ldi	r24, 0x13	; 19
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
    1348:	84 e1       	ldi	r24, 0x14	; 20
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
    1350:	85 e1       	ldi	r24, 0x15	; 21
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
    nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
    1358:	86 e1       	ldi	r24, 0x16	; 22
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // 1 Mbps, TX gain: 0dbm
    nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
    1360:	86 e0       	ldi	r24, 0x06	; 6
    1362:	66 e0       	ldi	r22, 0x06	; 6
    1364:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // CRC enable, 1 byte CRC length
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	68 e0       	ldi	r22, 0x08	; 8
    136c:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // Auto Acknowledgment // i made a change in (1<<ENAA_P0)|(1<<ENAA_P1)
    nrf24_configRegister(EN_AA,(0<<ENAA_P0)|(0<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // Enable RX addresses
    nrf24_configRegister(EN_RXADDR,(0<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
    nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
    1380:	84 e0       	ldi	r24, 0x04	; 4
    1382:	6f e4       	ldi	r22, 0x4F	; 79
    1384:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // Dynamic length configurations: No dynamic length
    nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
    1388:	8c e1       	ldi	r24, 0x1C	; 28
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    // Start listening
    nrf24_powerUpRx();
    1390:	0e 94 17 0b 	call	0x162e	; 0x162e <nrf24_powerUpRx>
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <nrf24_rx_address+0x6>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8WritePinVal(CE , DIO_u8LOW);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
    13b4:	29 81       	ldd	r18, Y+1	; 0x01
    13b6:	3a 81       	ldd	r19, Y+2	; 0x02
    13b8:	8b e0       	ldi	r24, 0x0B	; 11
    13ba:	b9 01       	movw	r22, r18
    13bc:	45 e0       	ldi	r20, 0x05	; 5
    13be:	0e 94 47 0c 	call	0x188e	; 0x188e <nrf24_writeRegister>
    DIO_u8WritePinVal(CE , DIO_u8HIGH);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <nrf24_payload_length>:

/* Returns the payload length */
uint8_t nrf24_payload_length()
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    return payload_len;
    13dc:	80 91 a4 00 	lds	r24, 0x00A4
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <nrf24_tx_address>:

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <nrf24_tx_address+0x6>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
   nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
    13f4:	29 81       	ldd	r18, Y+1	; 0x01
    13f6:	3a 81       	ldd	r19, Y+2	; 0x02
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	b9 01       	movw	r22, r18
    13fc:	45 e0       	ldi	r20, 0x05	; 5
    13fe:	0e 94 47 0c 	call	0x188e	; 0x188e <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
    1402:	29 81       	ldd	r18, Y+1	; 0x01
    1404:	3a 81       	ldd	r19, Y+2	; 0x02
    1406:	80 e1       	ldi	r24, 0x10	; 16
    1408:	b9 01       	movw	r22, r18
    140a:	45 e0       	ldi	r20, 0x05	; 5
    140c:	0e 94 47 0c 	call	0x188e	; 0x188e <nrf24_writeRegister>
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() 
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <nrf24_dataReady+0x6>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    // See note in getData() function - just checking RX_DR isn't good enough
    uint8_t status = nrf24_getStatus();
    1424:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrf24_getStatus>
    1428:	89 83       	std	Y+1, r24	; 0x01

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) 
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	80 74       	andi	r24, 0x40	; 64
    1432:	90 70       	andi	r25, 0x00	; 0
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	19 f0       	breq	.+6      	; 0x143e <nrf24_dataReady+0x24>
    {
        return 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	8a 83       	std	Y+2, r24	; 0x02
    143c:	07 c0       	rjmp	.+14     	; 0x144c <nrf24_dataReady+0x32>
    }

    return !nrf24_rxFifoEmpty();;
    143e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <nrf24_rxFifoEmpty>
    1442:	1a 82       	std	Y+2, r1	; 0x02
    1444:	88 23       	and	r24, r24
    1446:	11 f4       	brne	.+4      	; 0x144c <nrf24_dataReady+0x32>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty()
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    uint8_t fifoStatus;

    nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
    1462:	87 e1       	ldi	r24, 0x17	; 23
    1464:	9e 01       	movw	r18, r28
    1466:	2f 5f       	subi	r18, 0xFF	; 255
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	b9 01       	movw	r22, r18
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 22 0c 	call	0x1844	; 0x1844 <nrf24_readRegister>
    
    return (fifoStatus & (1 << RX_EMPTY));
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	81 70       	andi	r24, 0x01	; 1
}
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <nrf24_payloadLength>:

/* Returns the length of data waiting in the RX fifo */
uint8_t nrf24_payloadLength()
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	0f 92       	push	r0
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    spi_transfer(R_RX_PL_WID);
    1490:	80 e6       	ldi	r24, 0x60	; 96
    1492:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    status = spi_transfer(0x00);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    149c:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    return status;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <nrf24_getData>:

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) 
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <nrf24_getData+0x6>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    /* Pull down chip select */
    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    /* Send cmd to read rx payload */
    spi_transfer( R_RX_PAYLOAD );
    14c6:	81 e6       	ldi	r24, 0x61	; 97
    14c8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    
    /* Read payload */
    nrf24_transferSync(data,data,payload_len);
    14cc:	20 91 a4 00 	lds	r18, 0x00A4
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	49 81       	ldd	r20, Y+1	; 0x01
    14d6:	5a 81       	ldd	r21, Y+2	; 0x02
    14d8:	ba 01       	movw	r22, r20
    14da:	42 2f       	mov	r20, r18
    14dc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <nrf24_transferSync>
    
    /* Pull up chip select */
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    /* Reset status register */
    nrf24_configRegister(STATUS,(1<<RX_DR));   
    14e8:	87 e0       	ldi	r24, 0x07	; 7
    14ea:	60 e4       	ldi	r22, 0x40	; 64
    14ec:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <nrf24_retransmissionCount>:

/* Returns the number of retransmissions occured for the last message */
uint8_t nrf24_retransmissionCount()
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	0f 92       	push	r0
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    1504:	88 e0       	ldi	r24, 0x08	; 8
    1506:	9e 01       	movw	r18, r28
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	b9 01       	movw	r22, r18
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 22 0c 	call	0x1844	; 0x1844 <nrf24_readRegister>
    rv = rv & 0x0F;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	8f 70       	andi	r24, 0x0F	; 15
    1518:	89 83       	std	Y+1, r24	; 0x01
    return rv;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
}
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <nrf24_send>:

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) 
{    
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <nrf24_send+0x6>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
    /* Go to Standby-I first */
	  DIO_u8WritePinVal(CE , DIO_u8LOW);
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
     
    /* Set to transmitter mode , Power up if needed */
    nrf24_powerUpTx();
    153a:	0e 94 39 0b 	call	0x1672	; 0x1672 <nrf24_powerUpTx>

    /* Do we really need to flush TX fifo each time ? */
    #if 1
        /* Pull down chip select */
    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>

        /* Write cmd to flush transmit FIFO */
        spi_transfer(FLUSH_TX);     
    1546:	81 ee       	ldi	r24, 0xE1	; 225
    1548:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>

        /* Pull up chip select */
        DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    #endif 

    /* Pull down chip select */
        DIO_u8WritePinVal(CSN , DIO_u8LOW);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>

    /* Write cmd to write payload */
    spi_transfer(W_TX_PAYLOAD);
    155c:	80 ea       	ldi	r24, 0xA0	; 160
    155e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>

    /* Write payload */
    nrf24_transmitSync(value,payload_len);   
    1562:	20 91 a4 00 	lds	r18, 0x00A4
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	62 2f       	mov	r22, r18
    156c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <nrf24_transmitSync>

    /* Pull up chip select */
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>

    /* Start the transmission */
    DIO_u8WritePinVal(CE , DIO_u8HIGH);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <nrf24_isSending>:

uint8_t nrf24_isSending()
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <nrf24_isSending+0x6>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;

    /* read the current status */
    status = nrf24_getStatus();
    1594:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrf24_getStatus>
    1598:	89 83       	std	Y+1, r24	; 0x01
                
    /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
    if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	80 73       	andi	r24, 0x30	; 48
    15a2:	90 70       	andi	r25, 0x00	; 0
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	11 f0       	breq	.+4      	; 0x15ac <nrf24_isSending+0x22>
    {        
        return 0; /* false */
    15a8:	1a 82       	std	Y+2, r1	; 0x02
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <nrf24_isSending+0x26>
    }

    return 1; /* true */
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <nrf24_getStatus>:

uint8_t nrf24_getStatus()
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;
    DIO_u8WritePinVal(CSN , DIO_u8LOW);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    rv = spi_transfer(NOP);
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    15d4:	89 83       	std	Y+1, r24	; 0x01
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    return rv;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <nrf24_lastMessageStatus>:

uint8_t nrf24_lastMessageStatus()
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <nrf24_lastMessageStatus+0x6>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    uint8_t rv;

    rv = nrf24_getStatus();
    15f2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrf24_getStatus>
    15f6:	89 83       	std	Y+1, r24	; 0x01

    /* Transmission went OK */
    if((rv & ((1 << TX_DS))))
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 72       	andi	r24, 0x20	; 32
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	11 f0       	breq	.+4      	; 0x160a <nrf24_lastMessageStatus+0x22>
    {
        return NRF24_TRANSMISSON_OK;
    1606:	1a 82       	std	Y+2, r1	; 0x02
    1608:	0c c0       	rjmp	.+24     	; 0x1622 <nrf24_lastMessageStatus+0x3a>
    }
    /* Maximum retransmission count is reached */
    /* Last message probably went missing ... */
    else if((rv & ((1 << MAX_RT))))
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	80 71       	andi	r24, 0x10	; 16
    1612:	90 70       	andi	r25, 0x00	; 0
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	19 f0       	breq	.+6      	; 0x161e <nrf24_lastMessageStatus+0x36>
    {
        return NRF24_MESSAGE_LOST;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <nrf24_lastMessageStatus+0x3a>
    }  
    /* Probably still sending ... */
    else
    {
        return 0xFF;
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <nrf24_powerUpRx>:

void nrf24_powerUpRx()
{     
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    spi_transfer(FLUSH_RX);
    163e:	82 ee       	ldi	r24, 0xE2	; 226
    1640:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>

    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    164c:	87 e0       	ldi	r24, 0x07	; 7
    164e:	60 e7       	ldi	r22, 0x70	; 112
    1650:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    DIO_u8WritePinVal(CE , DIO_u8LOW);
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	6b e0       	ldi	r22, 0x0B	; 11
    1660:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
    DIO_u8WritePinVal(CE , DIO_u8HIGH);}
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <nrf24_powerUpTx>:

void nrf24_powerUpTx()
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
    167a:	87 e0       	ldi	r24, 0x07	; 7
    167c:	60 e7       	ldi	r22, 0x70	; 112
    167e:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>

    nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	6a e0       	ldi	r22, 0x0A	; 10
    1686:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <nrf24_powerDown>:

void nrf24_powerDown()
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	  DIO_u8WritePinVal(CE , DIO_u8LOW);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    nrf24_configRegister(CONFIG,nrf24_CONFIG);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	68 e0       	ldi	r22, 0x08	; 8
    16a4:	0e 94 06 0c 	call	0x180c	; 0x180c <nrf24_configRegister>
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <spi_transfer>:

/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <spi_transfer+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <spi_transfer+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t i = 0;
    16bc:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t rx = 0;    
    16be:	19 82       	std	Y+1, r1	; 0x01
    uint8_t temp=0 ;
    16c0:	1b 82       	std	Y+3, r1	; 0x03
    DIO_u8WritePinVal(SCK , DIO_u8LOW);
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>

    for(i=0;i<8;i++)
    16ca:	1a 82       	std	Y+2, r1	; 0x02
    16cc:	39 c0       	rjmp	.+114    	; 0x1740 <spi_transfer+0x92>
    {

        if(tx & (1<<(7-i)))
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	48 2f       	mov	r20, r24
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	87 e0       	ldi	r24, 0x07	; 7
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	82 1b       	sub	r24, r18
    16e0:	93 0b       	sbc	r25, r19
    16e2:	9a 01       	movw	r18, r20
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <spi_transfer+0x3c>
    16e6:	35 95       	asr	r19
    16e8:	27 95       	ror	r18
    16ea:	8a 95       	dec	r24
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <spi_transfer+0x38>
    16ee:	c9 01       	movw	r24, r18
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	90 70       	andi	r25, 0x00	; 0
    16f4:	88 23       	and	r24, r24
    16f6:	29 f0       	breq	.+10     	; 0x1702 <spi_transfer+0x54>
        {
        	  DIO_u8WritePinVal(MOSI , DIO_u8HIGH);
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    1700:	04 c0       	rjmp	.+8      	; 0x170a <spi_transfer+0x5c>
        }
        else
        {
        	DIO_u8WritePinVal(MOSI , DIO_u8LOW);
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
        }

        DIO_u8WritePinVal(SCK , DIO_u8HIGH);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>

        rx = rx << 1;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	88 0f       	add	r24, r24
    1716:	89 83       	std	Y+1, r24	; 0x01
        DIO_u8ReadPinVal(MISO , &temp);
    1718:	9e 01       	movw	r18, r28
    171a:	2d 5f       	subi	r18, 0xFD	; 253
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	b9 01       	movw	r22, r18
    1722:	0e 94 6a 07 	call	0xed4	; 0xed4 <DIO_u8ReadPinVal>
        if(temp)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 23       	and	r24, r24
    172a:	19 f0       	breq	.+6      	; 0x1732 <spi_transfer+0x84>
        {
            rx |= 0x01;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	81 60       	ori	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
        }

        DIO_u8WritePinVal(SCK , DIO_u8LOW);
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    uint8_t i = 0;
    uint8_t rx = 0;    
    uint8_t temp=0 ;
    DIO_u8WritePinVal(SCK , DIO_u8LOW);

    for(i=0;i<8;i++)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	20 f2       	brcs	.-120    	; 0x16ce <spi_transfer+0x20>
        }

        DIO_u8WritePinVal(SCK , DIO_u8LOW);
    }

    return rx;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <nrf24_transferSync+0xa>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <nrf24_transferSync+0xc>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <nrf24_transferSync+0xe>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9b 83       	std	Y+3, r25	; 0x03
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	7d 83       	std	Y+5, r23	; 0x05
    176e:	6c 83       	std	Y+4, r22	; 0x04
    1770:	4e 83       	std	Y+6, r20	; 0x06
    uint8_t i;

    for(i=0;i<len;i++)
    1772:	19 82       	std	Y+1, r1	; 0x01
    1774:	18 c0       	rjmp	.+48     	; 0x17a6 <nrf24_transferSync+0x50>
    {
        datain[i] = spi_transfer(dataout[i]);
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	8c 01       	movw	r16, r24
    1782:	02 0f       	add	r16, r18
    1784:	13 1f       	adc	r17, r19
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	9b 81       	ldd	r25, Y+3	; 0x03
    1790:	fc 01       	movw	r30, r24
    1792:	e2 0f       	add	r30, r18
    1794:	f3 1f       	adc	r31, r19
    1796:	80 81       	ld	r24, Z
    1798:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    179c:	f8 01       	movw	r30, r16
    179e:	80 83       	st	Z, r24
/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
{
    uint8_t i;

    for(i=0;i<len;i++)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	99 81       	ldd	r25, Y+1	; 0x01
    17a8:	8e 81       	ldd	r24, Y+6	; 0x06
    17aa:	98 17       	cp	r25, r24
    17ac:	20 f3       	brcs	.-56     	; 0x1776 <nrf24_transferSync+0x20>
    {
        datain[i] = spi_transfer(dataout[i]);
    }

}
    17ae:	26 96       	adiw	r28, 0x06	; 6
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <nrf24_transmitSync+0x6>
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <nrf24_transmitSync+0x8>
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	9b 83       	std	Y+3, r25	; 0x03
    17d2:	8a 83       	std	Y+2, r24	; 0x02
    17d4:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    
    for(i=0;i<len;i++)
    17d6:	19 82       	std	Y+1, r1	; 0x01
    17d8:	0e c0       	rjmp	.+28     	; 0x17f6 <nrf24_transmitSync+0x32>
    {
        spi_transfer(dataout[i]);
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	9b 81       	ldd	r25, Y+3	; 0x03
    17e4:	fc 01       	movw	r30, r24
    17e6:	e2 0f       	add	r30, r18
    17e8:	f3 1f       	adc	r31, r19
    17ea:	80 81       	ld	r24, Z
    17ec:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
    uint8_t i;
    
    for(i=0;i<len;i++)
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	99 81       	ldd	r25, Y+1	; 0x01
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	98 17       	cp	r25, r24
    17fc:	70 f3       	brcs	.-36     	; 0x17da <nrf24_transmitSync+0x16>
    {
        spi_transfer(dataout[i]);
    }

}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <nrf24_configRegister+0x6>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	6a 83       	std	Y+2, r22	; 0x02
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	8f 71       	andi	r24, 0x1F	; 31
    1826:	80 62       	ori	r24, 0x20	; 32
    1828:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    spi_transfer(value);
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    DIO_u8WritePinVal(CSN , DIO_u8HIGH);}
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <nrf24_readRegister+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <nrf24_readRegister+0x8>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	7b 83       	std	Y+3, r23	; 0x03
    1854:	6a 83       	std	Y+2, r22	; 0x02
    1856:	4c 83       	std	Y+4, r20	; 0x04
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	8f 71       	andi	r24, 0x1F	; 31
    1864:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    nrf24_transferSync(value,value,len);
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	2a 81       	ldd	r18, Y+2	; 0x02
    186e:	3b 81       	ldd	r19, Y+3	; 0x03
    1870:	b9 01       	movw	r22, r18
    1872:	4c 81       	ldd	r20, Y+4	; 0x04
    1874:	0e 94 ab 0b 	call	0x1756	; 0x1756 <nrf24_transferSync>
	  DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <nrf24_writeRegister+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <nrf24_writeRegister+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	7b 83       	std	Y+3, r23	; 0x03
    189e:	6a 83       	std	Y+2, r22	; 0x02
    18a0:	4c 83       	std	Y+4, r20	; 0x04
	  DIO_u8WritePinVal(CSN , DIO_u8LOW);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	8f 71       	andi	r24, 0x1F	; 31
    18ae:	80 62       	ori	r24, 0x20	; 32
    18b0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <spi_transfer>
    nrf24_transmitSync(value,len);
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	6c 81       	ldd	r22, Y+4	; 0x04
    18ba:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <nrf24_transmitSync>
	  DIO_u8WritePinVal(CSN , DIO_u8HIGH);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <DIO_u8WritePinVal>
}
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <nrf24_setupPins>:
void nrf24_setupPins()
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62

	DIO_u8WritePinDir(CE , DIO_u8HIGH);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_u8WritePinDir>
	DIO_u8WritePinDir(CSN , DIO_u8HIGH);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_u8WritePinDir>
	DIO_u8WritePinDir(SCK , DIO_u8HIGH);
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_u8WritePinDir>
	DIO_u8WritePinDir(MOSI , DIO_u8HIGH);
    18f4:	83 e0       	ldi	r24, 0x03	; 3
    18f6:	61 e0       	ldi	r22, 0x01	; 1
    18f8:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_u8WritePinDir>
	DIO_u8WritePinDir(MISO , DIO_u8LOW);
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_u8WritePinDir>
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <__prologue_saves__>:
    190a:	2f 92       	push	r2
    190c:	3f 92       	push	r3
    190e:	4f 92       	push	r4
    1910:	5f 92       	push	r5
    1912:	6f 92       	push	r6
    1914:	7f 92       	push	r7
    1916:	8f 92       	push	r8
    1918:	9f 92       	push	r9
    191a:	af 92       	push	r10
    191c:	bf 92       	push	r11
    191e:	cf 92       	push	r12
    1920:	df 92       	push	r13
    1922:	ef 92       	push	r14
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	ca 1b       	sub	r28, r26
    1934:	db 0b       	sbc	r29, r27
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	09 94       	ijmp

00001942 <__epilogue_restores__>:
    1942:	2a 88       	ldd	r2, Y+18	; 0x12
    1944:	39 88       	ldd	r3, Y+17	; 0x11
    1946:	48 88       	ldd	r4, Y+16	; 0x10
    1948:	5f 84       	ldd	r5, Y+15	; 0x0f
    194a:	6e 84       	ldd	r6, Y+14	; 0x0e
    194c:	7d 84       	ldd	r7, Y+13	; 0x0d
    194e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1950:	9b 84       	ldd	r9, Y+11	; 0x0b
    1952:	aa 84       	ldd	r10, Y+10	; 0x0a
    1954:	b9 84       	ldd	r11, Y+9	; 0x09
    1956:	c8 84       	ldd	r12, Y+8	; 0x08
    1958:	df 80       	ldd	r13, Y+7	; 0x07
    195a:	ee 80       	ldd	r14, Y+6	; 0x06
    195c:	fd 80       	ldd	r15, Y+5	; 0x05
    195e:	0c 81       	ldd	r16, Y+4	; 0x04
    1960:	1b 81       	ldd	r17, Y+3	; 0x03
    1962:	aa 81       	ldd	r26, Y+2	; 0x02
    1964:	b9 81       	ldd	r27, Y+1	; 0x01
    1966:	ce 0f       	add	r28, r30
    1968:	d1 1d       	adc	r29, r1
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	ed 01       	movw	r28, r26
    1976:	08 95       	ret

00001978 <_exit>:
    1978:	f8 94       	cli

0000197a <__stop_program>:
    197a:	ff cf       	rjmp	.-2      	; 0x197a <__stop_program>
